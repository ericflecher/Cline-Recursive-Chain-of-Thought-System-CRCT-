# Documentation and Packaging

## Objective
Enhance the documentation of the CLI Onboarding Agent and prepare it for distribution via PyPI to make it easily accessible to users.

## Tasks

### 1. Enhance Documentation (Priority: High)
- [ ] Create a comprehensive user guide with detailed examples
- [ ] Add architecture documentation with diagrams
- [ ] Improve function and class docstrings throughout the codebase
- [ ] Create a documentation website using Sphinx or MkDocs
- [ ] Add tutorials for common use cases

### 2. Prepare for PyPI Distribution (Priority: High)
- [ ] Update setup.py with complete metadata
- [ ] Create proper package classifiers
- [ ] Add a MANIFEST.in file for non-Python files
- [ ] Create a proper long_description from README.md
- [ ] Add development dependencies

### 3. Set Up CI/CD Pipeline (Priority: Medium)
- [ ] Configure GitHub Actions for automated testing
- [ ] Add test coverage reporting
- [ ] Set up automated PyPI deployment
- [ ] Implement version bumping automation
- [ ] Add linting and code quality checks

### 4. Create Installation Documentation (Priority: Medium)
- [ ] Document installation methods (pip, from source)
- [ ] Add platform-specific installation instructions
- [ ] Create troubleshooting guide for common installation issues
- [ ] Document dependencies and requirements

### 5. Implement Versioning Strategy (Priority: Low)
- [ ] Define semantic versioning approach
- [ ] Create a CHANGELOG.md file
- [ ] Implement version tracking in the code
- [ ] Add version command to the CLI

## Implementation Details

### Enhanced setup.py
```python
from setuptools import setup, find_packages
import os

# Read the contents of README.md
this_directory = os.path.abspath(os.path.dirname(__file__))
with open(os.path.join(this_directory, 'README.md'), encoding='utf-8') as f:
    long_description = f.read()

setup(
    name="cli_onboarding_agent",
    version="0.1.0",
    description="A CLI tool to generate standardized folder structures from templates",
    long_description=long_description,
    long_description_content_type="text/markdown",
    author="Cline Team",
    author_email="team@example.com",
    url="https://github.com/cline-team/cli-onboarding-agent",
    packages=find_packages(),
    include_package_data=True,
    install_requires=[
        "click>=8.0.0",
        "openai>=1.0.0",
    ],
    extras_require={
        "dev": [
            "pytest>=7.0.0",
            "pytest-cov>=4.0.0",
            "black>=22.0.0",
            "isort>=5.0.0",
            "flake8>=4.0.0",
            "sphinx>=4.0.0",
            "twine>=4.0.0",
        ],
        "ai": [
            "openai>=1.0.0",
        ],
    },
    entry_points={
        "console_scripts": [
            "onboard-project=cli_onboarding_agent.cli:main",
        ],
    },
    classifiers=[
        "Development Status :: 3 - Alpha",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Topic :: Software Development :: Code Generators",
        "Topic :: Software Development :: Libraries :: Python Modules",
    ],
    python_requires=">=3.8",
    keywords="cli, template, project structure, code generation",
)
```

### MANIFEST.in
```
include LICENSE
include README.md
include requirements.txt
recursive-include cli_onboarding_agent/templates *
```

### GitHub Actions Workflow
```yaml
name: Python Package

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    - name: Lint with flake8
      run: |
        flake8 src tests
    - name: Test with pytest
      run: |
        pytest --cov=cli_onboarding_agent
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python -m build
        twine upload dist/*
```

## Dependencies
- Sphinx or MkDocs for documentation
- GitHub Actions for CI/CD
- PyPI account for package distribution

## Expected Outcome
- Comprehensive documentation that makes the tool easy to use
- Published package on PyPI for easy installation
- Automated testing and deployment pipeline
- Clear versioning strategy for future releases
