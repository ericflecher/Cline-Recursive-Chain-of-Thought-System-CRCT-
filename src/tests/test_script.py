#!/usr/bin/env python
"""
Test script for the CLI Onboarding Agent.

This script demonstrates how to use the CLI Onboarding Agent programmatically.
"""

import os
import shutil
import tempfile
from pathlib import Path

from cli_onboarding_agent.template_reader import read_template
from cli_onboarding_agent.generator import generate_structure
from cli_onboarding_agent.populator import populate_documents
from cli_onboarding_agent.validator import validate_result


def main():
    """Run a test of the CLI Onboarding Agent."""
    # Create a temporary directory for the test
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_dir_path = Path(temp_dir)
        
        # Get the default template path
        template_path = Path(__file__).parent.parent / "cli_onboarding_agent" / "templates" / "default"
        
        # Create a target directory
        target_path = temp_dir_path / "test_project"
        
        print(f"Template path: {template_path}")
        print(f"Target path: {target_path}")
        
        # Read the template structure
        print("Reading template structure...")
        template_structure = read_template(template_path)
        
        # Generate the folder structure
        print("Generating folder structure...")
        generate_structure(target_path, template_structure, template_path)
        
        # Define template variables
        variables = {
            "project_name": "Test Project",
            "package_name": "test_project",
            "project_description": "A test project generated by the CLI Onboarding Agent",
            "author": "Test Author",
            "author_email": "test@example.com",
            "current_year": "2025",
        }
        
        # Populate the documents
        print("Populating documents...")
        populate_documents(
            target_path,
            template_path,
            template_structure,
            variables=variables
        )
        
        # Validate the result
        print("Validating result...")
        validation_result = validate_result(target_path, template_structure, template_path)
        
        if validation_result["is_valid"]:
            print("Validation successful!")
        else:
            print("Validation failed:")
            for error in validation_result["errors"]:
                print(f"  - {error}")
        
        # List the generated files
        print("\nGenerated files:")
        for item in sorted(target_path.glob("**/*")):
            if item.is_file():
                print(f"  - {item.relative_to(target_path)}")
        
        # Check for excluded guide documents
        guide_files = list(target_path.glob("**/*_guide*"))
        if guide_files:
            print("\nWARNING: Guide documents were not excluded:")
            for guide_file in guide_files:
                print(f"  - {guide_file.relative_to(target_path)}")
        else:
            print("\nAll guide documents were correctly excluded.")
        
        print("\nTest completed successfully!")


if __name__ == "__main__":
    main()
